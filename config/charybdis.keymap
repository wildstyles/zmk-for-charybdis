#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        langchange {
            bindings = <&kp LG(SPACE)>;
            key-positions = <17 18>;
        };
    };

    behaviors {
        homerow: homerow {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    
        td_mt: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        };

        td_q: tap_dance_q {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp Q>, <&kp QUESTION>;
        };
        td_e: tap_dance_e {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp E>, <&kp EXCLAMATION>;
        };
        td_w: tap_dance_w {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp W>, <&kp SQT>;
        };
        td_u: tap_dance_u {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp U>, <&kp KP_COMMA>;
        };
        td_i: tap_dance_i {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp I>, <&kp KP_DOT>;
        };
        td_o: tap_dance_o {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp O>, <&kp KP_MINUS>;
        };
        td_p: tap_dance_p {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp P>, <&kp KP_PLUS>;
        };
        td_r: tap_dance_r {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp R>, <&kp KP_EQUAL>;
        };
        td_sl: tap_dance_slash_backslash {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SLASH>, <&kp NON_US_BACKSLASH>;
        };
        td_as: tap_dance_as {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ASTRK>, <&kp CARET>;
        };
        td_gr: tap_dance_gr {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;
        };
        td_pa: tap_dance_pa {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp AMPS>, <&kp PERCENT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp TILDE       &kp N1   &kp N2    &kp N3    &kp N4        &kp N5              &kp N6            &kp N7    &kp N8     &kp N9   &kp N0    &kp PIPE
&kp ESC         &td_q    &td_w     &td_e     &td_r         &kp T               &kp Y             &td_u     &td_i      &td_o    &td_p     &td_mt
&kp TAB         &kp A    &lt 2 S   &kp D     &kp F         &kp G               &kp H             &kp J     &kp K      &lt 2 L  &kp SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z    &kp X     &kp C     &kp V         &kp B               &kp N             &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                                   &kp CAPS  &kp LEFT_ALT  &kp LEFT_COMMAND    &kp RET           &kp BSPC
                                             &kp LCTRL     &mkp LCLK           &kp SPACE
            >;
        };

        NAV {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
                                &trans  &trans    &trans
            >;
        };

        SYMNUM {
            bindings = <
&kp F1            &kp F2          &kp F3        &kp F4          &kp F5          &kp F6             &kp F7           &kp F8                &kp F9                 &kp F10      &kp F11    &kp F12
&kp CARET         &kp TILDE       &kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3    &kp GRAVE          &td_as           &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp AT       &kp HASH   &kp DOLLAR
&caps_word        &kp C_VOL_DN    &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6    &kp C_VOLUME_UP    &kp LEFT_ARROW   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PERCENT  &kp AMPS   &kp PIPE
&kp LC(LEFT_WIN)  &kp UNDERSCORE  &kp NUMBER_7  &kp NUMBER_8    &kp NUMBER_9    &kp N0             &td_pa           &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp ASTRK    &kp SLASH  &kp QUESTION
                                                &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW    &kp PLUS         &kp DEL
                                                                &kp DOWN_ARROW  &mkp RCLK          &kp MINUS
            >;
        };
    };
};
